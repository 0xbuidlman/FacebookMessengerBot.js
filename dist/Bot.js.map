{"version":3,"sources":["../src/Bot.js"],"names":["time","setTimeout","resolve","wait","Elements","Buttons","QuickReplies","userCache","Bot","token","verification","debug","_token","_debug","_verification","text","method","json","query","access_token","body","setting_type","greeting","result","input","thread_state","data","event","call_to_actions","payload","to","message","console","log","recipient","id","toJSON","err","JSON","parse","error","type","ee","Error","sender_action","isTyping","senderAction","setTyping","fields","cache","key","props","fromCache","entry","messaging","raw","sender","fetch","fetchUser","postback","e","isButton","hasOwnProperty","emit","delivery","delivered","mids","optin","param","ref","quick_reply","is_echo","isQuickReply","attachments","groupBy","image","images","map","a","url","video","videos","audio","location","coordinates","object","router","use","get","req","res","send","post","handleMessage","status"],"mappings":"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","file":"Bot.js","sourcesContent":["import EventEmitter from 'events';\nimport bodyParser from 'body-parser';\nimport {Router} from 'express';\nimport Elements from './Elements.js';\nimport Buttons from './Buttons.js';\nimport QuickReplies from './QuickReplies.js';\nimport fetch from './libs/fetch.js';\nimport _ from 'lodash';\n\nexport {Elements, Buttons, QuickReplies};\n\nconst userCache = {};\n\nexport async function wait(time) {\n  return new Promise(resolve => setTimeout(() => resolve(), time));\n}\n\nclass Bot extends EventEmitter {\n  static Buttons = Buttons;\n  static Elements = Elements;\n\n  static wait = wait;\n\n  constructor(token, verification, debug = false) {\n    super();\n\n    this._token = token;\n    this._debug = debug;\n    this._verification = verification;\n  }\n\n  async setGreeting(text) {\n    const {body: {result}} = await fetch('https://graph.facebook.com/v2.6/me/thread_settings', {\n      method: 'post',\n      json: true,\n      query: {access_token: this._token},\n      body: {setting_type: 'greeting', greeting: {text}}\n    });\n\n    return result;\n  }\n\n  async setGetStarted(input) {\n    if (!input) {\n      const {body: {result}} = await fetch('https://graph.facebook.com/v2.6/me/thread_settings', {\n        method: 'delete',\n        json: true,\n        query: {access_token: this._token},\n        body: {\n          setting_type: 'call_to_actions',\n          thread_state: 'new_thread'\n        }\n      });\n\n      return result;\n    }\n\n    const {data, event} = input;\n    const {body: {result}} = await fetch('https://graph.facebook.com/v2.6/me/thread_settings', {\n      method: 'post',\n      json: true,\n      query: {access_token: this._token},\n      body: {\n        setting_type: 'call_to_actions',\n        thread_state: 'new_thread',\n        call_to_actions: [{payload: JSON.stringify({data, event})}]\n      }\n    });\n\n    return result;\n  }\n\n  async setPersistentMenu(input) {\n    if (!input) {\n      const {body: {result}} = await fetch('https://graph.facebook.com/v2.6/me/thread_settings', {\n        method: 'delete',\n        json: true,\n        query: {access_token: this._token},\n        body: {\n          setting_type: 'call_to_actions',\n          thread_state: 'existing_thread'\n        }\n      });\n\n      return result;\n    }\n\n    const {body: {result}} = await fetch('https://graph.facebook.com/v2.6/me/thread_settings', {\n      method: 'post',\n      json: true,\n      query: {access_token: this._token},\n      body: {\n        setting_type: 'call_to_actions',\n        thread_state: 'existing_thread',\n        call_to_actions: input\n      }\n    });\n\n    return result;\n  }\n\n\n  async send(to, message) {\n    if (this._debug) {\n      console.log({recipient: {id: to}, message: message ? message.toJSON() : message});\n    }\n\n    try {\n      await fetch('https://graph.facebook.com/v2.6/me/messages', {\n        method: 'post',\n        json: true,\n        query: {access_token: this._token},\n        body: {recipient: {id: to}, message}\n      });\n    } catch (e) {\n      if (e.text) {\n        let text = e.text;\n        try {\n          const err = JSON.parse(e.text).error;\n          text = `${err.type || 'Unknown'}: ${err.message || 'No message'}`;\n        } catch (ee) {\n          // ignore\n        }\n\n        throw Error(text);\n      } else {\n        throw e;\n      }\n    }\n  }\n\n  async senderAction(to, sender_action) {\n    if (this._debug) {\n      console.log({recipient: {id: to}, sender_action});\n    }\n\n    try {\n      await fetch('https://graph.facebook.com/v2.6/me/messages', {\n        method: 'post',\n        json: true,\n        query: {access_token: this._token},\n        body: {recipient: {id: to}, sender_action}\n      });\n    } catch (e) {\n      if (e.text) {\n        let text = e.text;\n        try {\n          const err = JSON.parse(e.text).error;\n          text = `${err.type || 'Unknown'}: ${err.message || 'No message'}`;\n        } catch (ee) {\n          // ignore\n        }\n\n        throw Error(text);\n      } else {\n        throw e;\n      }\n    }\n  }\n\n  async setTyping(to, isTyping) {\n    const sender_action = isTyping ? 'typing_on' : 'typing_off';\n    this.senderAction(to, sender_action);\n  }\n\n  async startTyping(to) {\n    this.setTyping(to, true);\n  }\n\n  async stopTyping(to) {\n    this.setTyping(to, false);\n  }\n\n  async fetchUser(id, fields = 'first_name,last_name,profile_pic', cache = false) {\n    const key = id + fields;\n    let props;\n\n    if (cache && userCache[key]) {\n      props = userCache[key];\n      props.fromCache = true;\n    } else {\n      const {body} = await fetch(`https://graph.facebook.com/v2.6/${id}`, {\n        query: {access_token: this._token, fields}, json: true\n      });\n\n      props = body;\n      props.fromCache = false;\n\n      if (cache) {\n        userCache[key] = props;\n      }\n    }\n\n    return props;\n  }\n\n  async handleMessage(input) {\n    const body = JSON.parse(JSON.stringify(input));\n    const message = body.entry[0].messaging[0];\n    Object.assign(message, message.message);\n    delete message.message;\n\n    message.raw = input;\n\n    message.sender.fetch = async(fields, cache) => {\n      const props = await this.fetchUser(message.sender.id, fields, cache);\n      Object.assign(message.sender, props);\n      return message.sender;\n    };\n\n    // POSTBACK\n    if (message.postback) {\n      let postback = {};\n\n      try {\n        postback = JSON.parse(message.postback.payload);\n      } catch (e) {\n        // ignore\n      }\n      message.isButton = true;\n\n      if (postback.hasOwnProperty('data')) {\n        message.postback = postback;\n        message.data = postback.data;\n        message.event = postback.event;\n\n        this.emit('postback', message.event, message, message.data);\n\n        if (postback.hasOwnProperty('event')) {\n          this.emit(message.event, message, message.data);\n        }\n      } else {\n        this.emit('invalid-postback', message, message.postback);\n      }\n\n      return;\n    }\n\n    // DELIVERY\n    if (message.delivery) {\n      Object.assign(message, message.delivery);\n      message.delivered = message.delivery.mids;\n\n      delete message.delivery;\n\n      this.emit('delivery', message, message.delivered);\n      return;\n    }\n\n    // OPTIN\n    if (message.optin) {\n      message.param = message.optin.ref || true;\n      message.optin = message.param;\n      this.emit('optin', message, message.optin);\n      return;\n    }\n\n    // QUICK_REPLY\n    if (message.quick_reply && !message.is_echo) {\n      let postback = {};\n\n      try {\n        postback = JSON.parse(message.quick_reply.payload) || {};\n      } catch (e) {\n        // ignore\n      }\n\n      message.isQuickReply = true;\n\n      if (postback.hasOwnProperty('data')) {\n        message.postback = postback;\n        message.data = postback.data;\n        message.event = postback.event;\n\n        this.emit('postback', message.event, message, message.data);\n\n        if (postback.hasOwnProperty('event')) {\n          this.emit(message.event, message, message.data);\n        }\n      } else {\n        this.emit('invalid-postback', message, message.postback);\n      }\n\n      return;\n    }\n\n    const attachments = _.groupBy(message.attachments, 'type');\n\n    if (attachments.image) {\n      message.images = attachments.image.map(a => a.payload.url);\n    }\n\n    if (attachments.video) {\n      message.videos = attachments.video.map(a => a.payload.url);\n    }\n\n    if (attachments.audio) {\n      message.audio = attachments.audio.map(a => a.payload.url)[0];\n    }\n\n    if (attachments.location) {\n      const location = attachments.location[0];\n      message.location = {...location, ...location.payload.coordinates};\n      delete message.location.payload;\n    }\n\n    message.object = body.object;\n\n    delete message.attachments;\n\n    this.emit('message', message);\n  }\n\n  router() {\n    const router = new Router();\n\n    router.use(bodyParser.json());\n\n    router.get('/', (req, res) => {\n      if (req.query['hub.verify_token'] === this._verification) {\n        res.send(req.query['hub.challenge']);\n      } else {\n        res.send('Error, wrong validation token');\n      }\n    });\n\n    router.post('/', (req, res) => {\n      this.handleMessage(req.body);\n      res.send().status(200);\n    });\n\n    return router;\n  }\n}\n\nexport {Bot};\n\nexport default Bot;\n"]}